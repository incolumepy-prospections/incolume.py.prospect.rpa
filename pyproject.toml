[tool.poetry]
name = "incolume.py.prospect.rpa"
version = "0.5.0"
description = ""
authors = ["britodfbr <britodfbr@gmail.com>"]
readme = "README.md"
packages = [
  {include = "incolume"}
 ]


[tool.poetry.dependencies]
python = "^3.10"
pyautogui = "^0.9.54"
playwright = "^1.33.0"
customtkinter = "^5.1.3"


[tool.poetry.group.doc.dependencies]
mkdocs = "^1.4.3"


[tool.poetry.group.dev.dependencies]
taskipy = "^1.11.0"
pytest-cov = "^4.1.0"
pytest = "^7.3.1"
black = "^23.3.0"
isort = "^5.12.0"
pydocstyle = "^6.3.0"
mypy = "^1.3.0"
pylint = "^2.17.4"
bandit = "^1.7.5"
flake8 = "^6.0.0"
tox = "^4.5.1"
pytest-playwright = "^0.3.3"
types-pyautogui = "^0.9.3.6"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
exclude_dirs = ["tests", "examples", "coverage_report"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
 ]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
 ]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
 ]

[tool.pytest.ini_options]
#log_format = '%(asctime)s %(levelname)s %(message)s'
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = ["tests",]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
 ]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "ImportError",
  "ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
 ]

[tool.isort]
profile = "black"
known_first_party = "poetry"
skip = [".gitignore", ".dockerignore"]
skip_glob = ["example/*"]
multi_line_output = 3

[tool.black]
line-length = 79
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
 /(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
  | docs
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
 )/
 '''

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
#ignore_missing_imports = true
#ignore_errors = false
#warn_return_any = true
#warn_unused_configs = true

[[tool.mypy.overrides]]
module = "pyautogui.*"
disable_error_code = "attr-defined"
disallow_untyped_defs = true

[tool.taskipy.tasks]
bandit={help='', cmd='poetry run bandit -c pyproject.toml -r .'}
lint_black={help='Checking with black', cmd='poetry run black --check --diff incolume tests'}
lint_flake8={help='Checking with flake8', cmd='poetry run flake8 --config pyproject.toml incolume/ tests/'}
lint_isort={help='Checking with isort', cmd='poetry run isort --check --atomic --py all incolume/ tests/'}
lint_mypy={help='Checking with mypy', cmd='poetry run mypy --check incolume tests'}
lint_pydocstyle={help='Checking with pydocstyle', cmd='poetry run pydocstyle incolume/ tests/'}
lint_pylint={help='Checking with pylint', cmd=' poetry run pylint incolume/ tests/'}
pre_lint="task lint_black && task lint_isort && task lint_flake8 && task lint_mypy && task lint_pydocstyle && task lint_pylint"
lint={help='Checking all linters configurated', cmd=''}
prerelease={cmd='v=$(poetry version prerelease) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version prerelease'}
# pre_patch="poetry run task bandit && poetry run task lint"
patch={cmd='v=$(poetry version patch) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version patch'}
preminor={cmd='v=$(poetry version preminor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version preminor'}
premajor={cmd='v=$(poetry version premajor) && poetry run pytest && git ci -m "$v" pyproject.toml coverage_report $(find incolume* -name version.txt)', help='poetry version premajor'}
